import { Injectable, Logger } from '@nestjs/common';
import * as nodemailer from 'nodemailer';
import { ConfigService } from '@nestjs/config';

export interface SendEmailOptions {
  to: string;
  subject: string;
  text?: string;
  html?: string;
}

@Injectable()
export class EmailService {
  private readonly logger = new Logger(EmailService.name);
  private transporter: nodemailer.Transporter;

  constructor(private configService: ConfigService) {
    // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ SMTP –Ø–Ω–¥–µ–∫—Å–∞
    const host = this.configService.get('MAIL_HOST') || 'smtp.yandex.ru';
    const port = parseInt(this.configService.get('MAIL_PORT')) || 465;
    const user = this.configService.get('MAIL_USER');
    
    this.logger.log('=== –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Email Service ===');
    this.logger.log(`SMTP Host: ${host}`);
    this.logger.log(`SMTP Port: ${port}`);
    this.logger.log(`SMTP User: ${user}`);
    this.logger.log(`Secure Connection: ${this.configService.get('MAIL_SECURE') === 'true' || true}`);
    
    this.transporter = nodemailer.createTransport({
      host,
      port,
      secure: this.configService.get('MAIL_SECURE') === 'true' || true,
      auth: {
        user,
        pass: this.configService.get('MAIL_PASSWORD'),
      },
    });
    
    this.logger.log('Email —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω');
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç email –ø–∏—Å—å–º–æ
   * @param options - –û–ø—Ü–∏–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å—å–º–∞
   * @returns Promise —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –æ—Ç–ø—Ä–∞–≤–∫–∏
   */
  async sendMail(options: SendEmailOptions): Promise<any> {
    const fromName = this.configService.get('MAIL_FROM_NAME') || this.configService.get('MAIL_USER');
    const fromEmail = this.configService.get('MAIL_USER');
    
    const mailOptions = {
      from: `"${fromName}" <${fromEmail}>`,
      to: options.to,
      subject: options.subject,
      text: options.text,
      html: options.html,
    };

    const startTime = Date.now();
    
    this.logger.log('=== –ù–∞—á–∞–ª–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å—å–º–∞ ===');
    this.logger.log(`–û—Ç –∫–æ–≥–æ: "${fromName}" <${fromEmail}>`);
    this.logger.log(`–ö–æ–º—É: ${options.to}`);
    this.logger.log(`–¢–µ–º–∞: ${options.subject}`);
    this.logger.log(`–†–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞: ${options.text?.length || 0} —Å–∏–º–≤–æ–ª–æ–≤`);
    this.logger.log(`–†–∞–∑–º–µ—Ä HTML: ${options.html?.length || 0} —Å–∏–º–≤–æ–ª–æ–≤`);

    try {
      const info = await this.transporter.sendMail(mailOptions);
      const duration = Date.now() - startTime;
      
      this.logger.log('=== –ü–∏—Å—å–º–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ===');
      this.logger.log(`Message ID: ${info.messageId}`);
      this.logger.log(`–ü–æ–ª—É—á–∞—Ç–µ–ª—å: ${options.to}`);
      this.logger.log(`–¢–µ–º–∞: ${options.subject}`);
      this.logger.log(`–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: ${duration}ms`);
      this.logger.log(`Response: ${info.response}`);
      
      return info;
    } catch (error) {
      const duration = Date.now() - startTime;
      
      this.logger.error('=== –û–®–ò–ë–ö–ê –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∏—Å—å–º–∞ ===');
      this.logger.error(`–ü–æ–ª—É—á–∞—Ç–µ–ª—å: ${options.to}`);
      this.logger.error(`–¢–µ–º–∞: ${options.subject}`);
      this.logger.error(`–í—Ä–µ–º—è –¥–æ –æ—à–∏–±–∫–∏: ${duration}ms`);
      this.logger.error(`–¢–∏–ø –æ—à–∏–±–∫–∏: ${error.name}`);
      this.logger.error(`–°–æ–æ–±—â–µ–Ω–∏–µ –æ—à–∏–±–∫–∏: ${error.message}`);
      this.logger.error(`–ö–æ–¥ –æ—à–∏–±–∫–∏: ${error.code || 'N/A'}`);
      this.logger.error(`Stack trace:`, error.stack);
      
      throw error;
    }
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç JSON –¥–∞–Ω–Ω—ã–µ –≤ –∫—Ä–∞—Å–∏–≤—É—é HTML —Ç–∞–±–ª–∏—Ü—É
   */
  private formatMetaDataAsHtml(meta: any): string {
    if (!meta || typeof meta !== 'object') {
      return '';
    }

    const formatValue = (value: any): string => {
      if (value === null || value === undefined) {
        return '<em>–Ω–µ —É–∫–∞–∑–∞–Ω–æ</em>';
      }
      if (typeof value === 'boolean') {
        return value ? '–î–∞' : '–ù–µ—Ç';
      }
      if (Array.isArray(value)) {
        return value.join(', ');
      }
      if (typeof value === 'object') {
        return JSON.stringify(value, null, 2).replace(/\n/g, '<br>').replace(/ /g, '&nbsp;');
      }
      return String(value);
    };

    const formatLabel = (key: string): string => {
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º camelCase –≤ —á–∏—Ç–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç
      return key
        .replace(/([A-Z])/g, ' $1')
        .replace(/^./, (str) => str.toUpperCase())
        .trim();
    };

    let html = '<table style="border-collapse: collapse; width: 100%; margin-top: 15px;">';
    
    for (const [key, value] of Object.entries(meta)) {
      html += `
        <tr>
          <td style="padding: 8px; border: 1px solid #ddd; background-color: #f5f5f5; font-weight: bold; width: 40%;">
            ${formatLabel(key)}
          </td>
          <td style="padding: 8px; border: 1px solid #ddd;">
            ${formatValue(value)}
          </td>
        </tr>
      `;
    }
    
    html += '</table>';
    return html;
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ
   * @param submissionData - –î–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
   */
  async sendSubmissionNotification(submissionData: any): Promise<void> {
    this.logger.log('=== –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞—è–≤–∫–µ ===');
    
    const { formType, name, email, phone, comments, files, meta } = submissionData;

    this.logger.log(`–¢–∏–ø —Ñ–æ—Ä–º—ã: ${formType}`);
    this.logger.log(`–ò–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è: ${name}`);
    this.logger.log(`Email –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è: ${email || '–Ω–µ —É–∫–∞–∑–∞–Ω'}`);
    this.logger.log(`–¢–µ–ª–µ—Ñ–æ–Ω –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è: ${phone || '–Ω–µ —É–∫–∞–∑–∞–Ω'}`);
    this.logger.log(`–ï—Å—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: ${!!comments}`);
    this.logger.log(`–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤: ${files?.length || 0}`);
    this.logger.log(`–ï—Å—Ç—å meta –¥–∞–Ω–Ω—ã–µ: ${!!meta}`);
    
    if (files && files.length > 0) {
      this.logger.log('–ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:');
      files.forEach((file: string, index: number) => {
        this.logger.log(`  ${index + 1}. ${file}`);
      });
    }

    const subject = `–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞: ${formType}`;
    const backendUrl = 'https://sibkomplekt.ru';
    
    let text = `–ü–æ–ª—É—á–µ–Ω–∞ –Ω–æ–≤–∞—è –∑–∞—è–≤–∫–∞\n\n`;
    text += `–¢–∏–ø —Ñ–æ—Ä–º—ã: ${formType}\n`;
    text += `–ò–º—è: ${name}\n`;
    if (email) text += `Email: ${email}\n`;
    if (phone) text += `–¢–µ–ª–µ—Ñ–æ–Ω: ${phone}\n`;
    if (comments) text += `–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: ${comments}\n`;
    if (files && files.length > 0) {
      text += `\n–ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:\n`;
      files.forEach((file: string) => {
        text += `- ${backendUrl}/uploads/submissions/${file}\n`;
      });
    }
    if (meta) {
      text += `\n–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: ${JSON.stringify(meta, null, 2)}\n`;
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º HTML –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    let html = `
      <div style="font-family: Arial, sans-serif; max-width: 800px; margin: 0 auto;">
        <h2 style="color: #333; border-bottom: 2px solid #007bff; padding-bottom: 10px;">
          –ü–æ–ª—É—á–µ–Ω–∞ –Ω–æ–≤–∞—è –∑–∞—è–≤–∫–∞
        </h2>
        
        <table style="border-collapse: collapse; width: 100%; margin-bottom: 20px;">
          <tr>
            <td style="padding: 12px; border: 1px solid #ddd; background-color: #f5f5f5; font-weight: bold; width: 30%;">
              –¢–∏–ø —Ñ–æ—Ä–º—ã:
            </td>
            <td style="padding: 12px; border: 1px solid #ddd;">
              ${formType}
            </td>
          </tr>
          <tr>
            <td style="padding: 12px; border: 1px solid #ddd; background-color: #f5f5f5; font-weight: bold;">
              –ò–º—è:
            </td>
            <td style="padding: 12px; border: 1px solid #ddd;">
              ${name}
            </td>
          </tr>
          ${email ? `
          <tr>
            <td style="padding: 12px; border: 1px solid #ddd; background-color: #f5f5f5; font-weight: bold;">
              Email:
            </td>
            <td style="padding: 12px; border: 1px solid #ddd;">
              <a href="mailto:${email}" style="color: #007bff; text-decoration: none;">${email}</a>
            </td>
          </tr>
          ` : ''}
          ${phone ? `
          <tr>
            <td style="padding: 12px; border: 1px solid #ddd; background-color: #f5f5f5; font-weight: bold;">
              –¢–µ–ª–µ—Ñ–æ–Ω:
            </td>
            <td style="padding: 12px; border: 1px solid #ddd;">
              <a href="tel:${phone}" style="color: #007bff; text-decoration: none;">${phone}</a>
            </td>
          </tr>
          ` : ''}
          ${comments ? `
          <tr>
            <td style="padding: 12px; border: 1px solid #ddd; background-color: #f5f5f5; font-weight: bold;">
              –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏:
            </td>
            <td style="padding: 12px; border: 1px solid #ddd;">
              ${comments}
            </td>
          </tr>
          ` : ''}
        </table>
    `;

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–µ–∫—Ü–∏—é —Å —Ñ–∞–π–ª–∞–º–∏ –¥–ª—è —Ä–µ–∑—é–º–µ (VACANCY)
    if (files && files.length > 0 && formType === 'VACANCY') {
      html += `
        <div style="margin: 20px 0; padding: 20px; background-color: #f8f9fa; border-radius: 8px; border-left: 4px solid #28a745;">
          <h3 style="color: #28a745; margin-top: 0;">üìÑ –†–µ–∑—é–º–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞</h3>
          ${files.map((file: string) => {
            const fileUrl = `${backendUrl}/uploads/submissions/${file}`;
            return `
              <div style="margin: 10px 0;">
                <a href="${fileUrl}" 
                   style="display: inline-block; 
                          padding: 12px 24px; 
                          background-color: #28a745; 
                          color: white; 
                          text-decoration: none; 
                          border-radius: 5px;
                          font-weight: bold;
                          transition: background-color 0.3s;">
                  üì• –°–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∑—é–º–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
                </a>
                <p style="margin: 5px 0; color: #666; font-size: 12px;">
                  –§–∞–π–ª: ${file}
                </p>
              </div>
            `;
          }).join('')}
        </div>
      `;
    } 
    // –î–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ —Ñ–æ—Ä–º –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
    else if (files && files.length > 0) {
      html += `
        <div style="margin: 20px 0;">
          <h3 style="color: #333;">üìé –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:</h3>
          <ul style="list-style: none; padding: 0;">
            ${files.map((file: string) => {
              const fileUrl = `${backendUrl}/uploads/submissions/${file}`;
              return `
                <li style="margin: 8px 0;">
                  <a href="${fileUrl}" style="color: #007bff; text-decoration: none;">
                    üìÑ ${file}
                  </a>
                </li>
              `;
            }).join('')}
          </ul>
        </div>
      `;
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–µ–∫—Ü–∏—é —Å –¥–∞–Ω–Ω—ã–º–∏ –æ–ø—Ä–æ—Å–Ω–æ–≥–æ –ª–∏—Å—Ç–∞ (QUESTIONNAIRE)
    if (meta && formType === 'QUESTIONNAIRE') {
      html += `
        <div style="margin: 20px 0;">
          <h3 style="color: #333; border-bottom: 2px solid #007bff; padding-bottom: 8px;">
            üìã –î–∞–Ω–Ω—ã–µ –æ–ø—Ä–æ—Å–Ω–æ–≥–æ –ª–∏—Å—Ç–∞
          </h3>
          ${this.formatMetaDataAsHtml(meta)}
        </div>
      `;
    }
    // –î–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ —Ñ–æ—Ä–º –ø–æ–∫–∞–∑—ã–≤–∞–µ–º meta –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –µ—Å—Ç—å
    else if (meta) {
      html += `
        <div style="margin: 20px 0;">
          <h3 style="color: #333;">üìù –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</h3>
          ${this.formatMetaDataAsHtml(meta)}
        </div>
      `;
    }

    html += `
        <div style="margin-top: 30px; padding-top: 20px; border-top: 1px solid #ddd; color: #666; font-size: 12px;">
          <p>–≠—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ. –ù–µ –æ—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ —ç—Ç–æ –ø–∏—Å—å–º–æ.</p>
        </div>
      </div>
    `;

    const recipientEmail = this.configService.get('MAIL_RECIPIENT') || this.configService.get('MAIL_USER');
    
    this.logger.log(`–ü–æ–ª—É—á–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${recipientEmail}`);
    this.logger.log(`–¢–µ–º–∞ –ø–∏—Å—å–º–∞: ${subject}`);
    
    try {
      await this.sendMail({
        to: recipientEmail,
        subject,
        text,
        html,
      });
      
      this.logger.log('=== –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞—è–≤–∫–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ===');
    } catch (error) {
      this.logger.error('=== –û–®–ò–ë–ö–ê –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞—è–≤–∫–µ ===');
      this.logger.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∑–∞—è–≤–∫–∏ –æ—Ç: ${name}`);
      throw error;
    }
  }
}
