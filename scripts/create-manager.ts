import { PrismaClient, Role } from '@prisma/client';
import { hash } from 'argon2';
import * as readline from 'readline';

const prisma = new PrismaClient();

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ä–æ–ª—å—é MANAGER
 * 
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 * pnpm run create-manager
 * 
 * –ò–ª–∏ —Å –ø–µ—Ä–µ–¥–∞—á–µ–π –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤:
 * pnpm run create-manager -- --email=manager@example.com --password=SecurePass123 --name="–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤" --phone="+79001234567"
 */

interface CreateManagerOptions {
  email: string;
  password: string;
  name?: string;
  phone?: string;
}

function parseArgs(): Partial<CreateManagerOptions> {
  const args = process.argv.slice(2);
  const options: Partial<CreateManagerOptions> = {};

  for (const arg of args) {
    if (arg.startsWith('--email=')) {
      options.email = arg.split('=')[1];
    } else if (arg.startsWith('--password=')) {
      options.password = arg.split('=')[1];
    } else if (arg.startsWith('--name=')) {
      options.name = arg.split('=')[1];
    } else if (arg.startsWith('--phone=')) {
      options.phone = arg.split('=')[1];
    }
  }

  return options;
}

function createInterface() {
  return readline.createInterface({
    input: process.stdin,
    output: process.stdout,
  });
}

function question(rl: readline.Interface, query: string): Promise<string> {
  return new Promise((resolve) => {
    rl.question(query, resolve);
  });
}

async function promptForData(): Promise<CreateManagerOptions> {
  const rl = createInterface();
  
  console.log('\nüìù –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ä–æ–ª—å—é MANAGER\n');
  
  const email = await question(rl, 'Email (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ): ');
  if (!email) {
    rl.close();
    throw new Error('Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω');
  }

  const password = await question(rl, '–ü–∞—Ä–æ–ª—å (–º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤): ');
  if (!password || password.length < 6) {
    rl.close();
    throw new Error('–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤');
  }

  const name = await question(rl, '–ò–º—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ): ');
  const phone = await question(rl, '–¢–µ–ª–µ—Ñ–æ–Ω (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ): ');

  rl.close();

  return {
    email: email.trim(),
    password: password.trim(),
    name: name.trim() || undefined,
    phone: phone.trim() || undefined,
  };
}

async function createManager(options: CreateManagerOptions) {
  console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email
  const existingUserByEmail = await prisma.user.findUnique({
    where: { email: options.email },
  });

  if (existingUserByEmail) {
    throw new Error(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å email "${options.email}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º
  if (options.phone) {
    const existingUserByPhone = await prisma.user.findUnique({
      where: { phone: options.phone },
    });

    if (existingUserByPhone) {
      throw new Error(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º "${options.phone}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
    }
  }

  console.log('üîê –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è...');
  const hashedPassword = await hash(options.password);

  console.log('üíæ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
  const user = await prisma.user.create({
    data: {
      email: options.email,
      password: hashedPassword,
      name: options.name,
      phone: options.phone,
      rights: [Role.MANAGER],
    },
  });

  console.log('\n' + '='.repeat(60));
  console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!');
  console.log('='.repeat(60));
  console.log(`ID:       ${user.id}`);
  console.log(`Email:    ${user.email}`);
  console.log(`–ò–º—è:      ${user.name || '‚Äî'}`);
  console.log(`–¢–µ–ª–µ—Ñ–æ–Ω:  ${user.phone || '‚Äî'}`);
  console.log(`–†–æ–ª–∏:     ${user.rights.join(', ')}`);
  console.log('='.repeat(60));
  console.log('\nüí° –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É —Å —ç—Ç–∏–º–∏ —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏\n');
}

async function main() {
  try {
    const args = parseArgs();

    let options: CreateManagerOptions;

    // –ï—Å–ª–∏ –µ—Å—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
    if (args.email && args.password) {
      options = args as CreateManagerOptions;
      console.log('\nüìã –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏\n');
    } else {
      // –ò–Ω–∞—á–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ
      options = await promptForData();
    }

    await createManager(options);
  } catch (error) {
    console.error('\n‚ùå –û—à–∏–±–∫–∞:', error instanceof Error ? error.message : String(error));
    process.exit(1);
  } finally {
    await prisma.$disconnect();
  }
}

main();

